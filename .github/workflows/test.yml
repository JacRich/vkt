name: build-and-test
on:
  push:
  pull_request:
  schedule:
    - cron: "0 2 * * 1,5" # 月曜日と金曜日の02:00(UTC)に実行(JSTだと11:00)
jobs:
  build-and-test-on-linux:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # https://itneko.com/actions-checkout/
          #token: ${{ secrets.SUB_MODULE_TOKEN }}
          submodules: true
      - name: install library
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libglfw3 libglfw3-dev libglew-dev
          cd .. 
          git clone https://gitlab.com/libeigen/eigen.git
          cd eigen
          git checkout 3.4.0
          CC=clang-12 CXX=clang++-12 cmake \
                                     -DCMAKE_BUILD_TYPE=Release \
                                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                                     -Bbuild -H.
          cd build && make -j2 && sudo make install
          cd ..
          git clone https://github.com/google/glog.git
          cd glog && git checkout v0.5.0
          CC=clang-12 CXX=clang++-12 cmake \
                                     -DCMAKE_BUILD_TYPE=Release \
                                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                                     -DBUILD_SHARED_LIBS=ON \
                                     -Bbuild -H.
          cd build && make -j2 && sudo make install
        shell: bash
      - name: use clang12
        run: |
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 1000
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 1000
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-12 1000
          sudo apt-get update -y
          sudo apt-get install -y clang-tidy-12 
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 1000
          update-alternatives --config clang
        shell: bash
      - name: CMake Configure
        run: |
          CC=clang CXX=clang++ cmake -Bcmake-build-release -H. \
                                     -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
                                     -DCMAKE_BUILD_TYPE=Release \
                                     -DBUILD_WITH_MARCH_NATIVE=OFF \
                                     -DUSE_CCACHE=OFF \
                                     -DUSE_CPP20=ON \
                                     -DUSE_SANITIZER=OFF \
                                     -DUSE_STACK_TRACE_LOGGER=ON \
                                     -DAPPLY_CLANG_FORMAT=ON

          cp cmake-build-release/compile_commands.json ./compile_commands.json
      - name: do clang-tidy
        run: |
          ./script/do-clang-tidy.sh
      - name: build
        run: |
          cd cmake-build-release
          make -j4
        shell: bash
      - name: run_test
        run: |
          pwd
          cd cmake-build-release
          ./c-quartic-equation
          ./quartic-equation
        shell: bash
      - name: check git diff
        run: |
          git diff-index --exit-code --ignore-submodules HEAD
  build-and-test-on-windows:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # https://itneko.com/actions-checkout/
          #token: ${{ secrets.SUB_MODULE_TOKEN }}
          submodules: true
      - name: Add Ninja # Ninjaを導入
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Add cl and nmake to PATH # Ninja+cl.exeを実現するために必要(cl.exe nmake.exeにPATHを通す)
        uses: ilammy/msvc-dev-cmd@v1
      - name: Clone vcpkg
        run: |
          cd ..
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          git checkout 5568f110b509a9fd90711978a7cb76bae75bb092 # 2021.05.12 release
      - name: Restore from cache and install vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: "${{ github.workspace }}/../vcpkg"
          vcpkgGitCommitId: "5568f110b509a9fd90711978a7cb76bae75bb092" # 2021.05.12 release
      - name: install library
        shell: powershell
        run: |
          ${{ github.workspace }}\..\vcpkg\vcpkg.exe update
          ${{ github.workspace }}\..\vcpkg\vcpkg.exe install eigen3:x64-windows
          ${{ github.workspace }}\..\vcpkg\vcpkg.exe install glog:x64-windows
          ${{ github.workspace }}\..\vcpkg\vcpkg.exe install glew:x64-windows
          ${{ github.workspace }}\..\vcpkg\vcpkg.exe install glfw3:x64-windows
          # ${{ github.workspace }}\..\vcpkg\vcpkg.exe install ffmpeg[avcodec,avformat,swscale,avresample]:x64-windows
          # ${{ github.workspace }}\..\vcpkg\vcpkg.exe install opencv4[eigen,ffmpeg,openmp]:x64-windows
      - name: Cache OpenCV
        uses: actions/cache@v2
        with:
          path: C:\opencv
          key: ${{ runner.os }}-1631954805
      - name: build OpenCV
        shell: powershell
        run: |
          if (!(Test-Path C:\opencv\OpenCVConfig.cmake)) {
            cd ..
            git clone https://github.com/opencv/opencv.git
            cd opencv 
            git checkout 4.5.3
            mkdir build -Force -ErrorAction Stop | Out-Null
            cd build
            cmake  -G Ninja `
                  -D CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\..\vcpkg\scripts\buildsystems\vcpkg.cmake `
                  -D CMAKE_BUILD_TYPE=Release `
                  -D CMAKE_INSTALL_PREFIX=C:\opencv `
                  -D ENABLE_CXX11=ON `
                  -D BUILD_DOCS=OFF `
                  -D BUILD_EXAMPLES=OFF `
                  -D BUILD_JASPER=OFF `
                  -D BUILD_OPENEXR=OFF `
                  -D BUILD_PERF_TESTS=OFF `
                  -D BUILD_TESTS=OFF `
                  -D WITH_EIGEN=ON `
                  -D WITH_FFMPEG=ON `
                  -D OPENCV_FFMPEG_USE_FIND_PACKAGE=OFF `
                  -D OPENCV_FFMPEG_SKIP_DOWNLOAD=OFF `
                  -D WITH_OPENMP=ON `
                  ..
            ninja -j2
            ninja install
          }
          cd C:\opencv
          dir
      - name: build
        shell: powershell
        run: |
          $buildDirectory = "build_win_x64"
          mkdir $buildDirectory -Force -ErrorAction Stop | Out-Null
          cd $buildDirectory
          cmake  -G Ninja `
                 -D CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\..\vcpkg\scripts\buildsystems\vcpkg.cmake `
                 -D CMAKE_EXPORT_COMPILE_COMMANDS=1 `
                 -D CMAKE_BUILD_TYPE=Release `
                 -D BUILD_WITH_MARCH_NATIVE=OFF `
                 -D USE_CCACHE=OFF `
                 -D USE_CPP20=OFF `
                 -D USE_SANITIZER=OFF `
                 -D USE_STACK_TRACE_LOGGER=ON `
                 -D APPLY_CLANG_FORMAT=OFF `
                 ..
                  # TODO -D USE_CPP20=ON
          ninja -j2
          dir
          .\c-quartic-equation.exe
