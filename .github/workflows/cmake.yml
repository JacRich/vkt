name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - VS_VERSION: Visual Studio 16
            VS_VER: 2019
            SDK: release-1911 # gisinternals SDK version still to 2017
            MSVC_VER: 1920
            platform: x86
            PROJ_BRANCH: "7.2"
            LIBWEBP_URL: "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.0.3-windows-x86.zip"
            LIBZSTD_URL: "https://github.com/facebook/zstd/releases/download/v1.4.5/zstd-v1.4.5-win32.zip"
            LIBDEFLATE_URL: "https://github.com/ebiggers/libdeflate/releases/download/v1.6/libdeflate-1.6-windows-i686-bin.zip"

    env:
        VS_VERSION: ${{ matrix.VS_VERSION }}
        VS_VER: ${{ matrix.VS_VER }}
        SDK: ${{ matrix.SDK }}
        MSVC_VER: ${{ matrix.MSVC_VER }}
        platform: ${{ matrix.platform }}
        PROJ_BRANCH: "${{ matrix.PROJ_BRANCH }}"
        LIBWEBP_URL: "${{ matrix.LIBWEBP_URL }}"
        LIBZSTD_URL: "${{ matrix.LIBZSTD_URL }}"
        LIBDEFLATE_URL: "${{ matrix.LIBDEFLATE_URL }}"
        APPVEYOR: true # to skip some tests
        PYTHON_VERSION: "3.7.9"

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
    
    - name: Install GLEW
      run: |
        git clone https://github.com/nigels-com/glew.git glew
        make buildwin

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
